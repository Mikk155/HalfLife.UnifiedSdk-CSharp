
using HalfLife.UnifiedSdk.Utilities.Tools;
using System.CommandLine;
using System.Reflection;

namespace HalfLife.UnifiedSdk.Packager
{
    internal static class Program
    {
        // Get the name of the mod directory.
        private static readonly string AbsoluteModDirectory = Path.GetDirectoryName(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location))
            ?? throw new InvalidOperationException("Couldn't get root directory");
        private static readonly string ModDirectory = Path.GetFileNameWithoutExtension(AbsoluteModDirectory);

        private static string MakeModPath(string path) => Path.Combine(ModDirectory, path);

        /// <summary>
        /// List of files and directories to package.
        /// All scripts are also included for others to use.
        /// Filenames ending with ".install" will be renamed to remove this extension after being added to the archive.
        /// Files specific to only some of the games should be listed as well. The packager will skip any that don't exist.
        /// </summary>
        private static readonly IEnumerable<string> PackageFiles = new[]
        {
            Path.Combine("cl_dlls", "client.dll"),
            Path.Combine("dlls", "hl.dll"),
            "delta.lst",
            "liblist.gam",
            "skill.cfg",
            "skillopfor.cfg",
            "settings.scr.install",
            "user.scr.install",
            "titles.txt",
            "installer",
            "models",
            "resource",
            "scripts"
        }.Select(MakeModPath)
        //Include content directories if they exist.
        .Concat(ModUtilities.AllPublicModDirectorySuffixes
            .Select(s => ModUtilities.FormatModDirectory(ModDirectory, s))
            .Where(Directory.Exists));

        // Files to exclude from the archive.
        private static readonly IEnumerable<string> PackageFilesExclusionList = new[]
        {
            // Exclude player model image (autogenerated by game).
            Path.Combine("models", "player", "remapped.bmp"),
            // Exclude nuget configuration file. Only used for referencing dev packages.
            Path.Combine("scripts", "nuget.config"),
            // Exclude the VS Code directory. The contents are available on the wiki if modders need them.
            Path.Combine("scripts" ,"installer", ".vscode"),
            Path.Combine("scripts", "packager", ".vscode"),
            // Exclude omnisharp configuration files.
            Path.Combine("scripts", "installer", "omnisharp.json"),
            Path.Combine("scripts", "packager", "omnisharp.json")
        }.Select(MakeModPath);

        private const string PackageName = "HalfLifeUnified-Game";

        public static int Main(string[] args)
        {
            // Move to Half-Life directory.
            Environment.CurrentDirectory = Path.GetDirectoryName(AbsoluteModDirectory) ?? throw new InvalidOperationException("Couldn't get game directory");

            var rootCommand = new RootCommand("Half-Life game packager");

            rootCommand.SetHandler(() =>
            {
                var completePackageName = $"{PackageName}-{DateTimeOffset.UtcNow:yyyy-MM-dd-H-mm-ss}";

                using var packager = new Packager(completePackageName, PackageFilesExclusionList);
                packager.AddFiles(PackageFiles);
            });

            return rootCommand.Invoke(args);
        }
    }
}